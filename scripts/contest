#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
  cat << EOF
Usage: $(basename "${BASH_SOURCE[0]}") <contest_name> <number_of_problems | last_problem_letter>

Example:
  $(basename "${BASH_SOURCE[0]}") ABC123 H   # creates ABC123/A.cpp ... ABC123/H.cpp
  $(basename "${BASH_SOURCE[0]}") XYZ456 5   # creates XYZ456/A.cpp ... XYZ456/E.cpp
EOF
  exit
}

cleanup() {
  status=$?
  trap - SIGTERM ERR EXIT

  if [[ -n "${contest_path-}" && -d "$contest_path" ]]; then
    if [[ $status -ne 0 ]]; then
      rm -rf "$contest_path"
      msg "${RED}Error occurred. Cleaning up: $contest_path${NOFORMAT}"
    fi
  fi
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1}
  msg "$msg"
  exit "$code"
}

parse_params() {
  if [[ $# -ne 2 ]]; then
    usage
  fi

  contest_name=$(echo "$1" | tr '[:lower:]' '[:upper:]')
  problems=$(echo "$2" | tr '[:lower:]' '[:upper:]')

  if [[ $problems =~ ^[0-9]+$ ]]; then
    count=$problems
  elif [[ $problems =~ ^[A-Z]+$ ]]; then
    count=$(letters_to_num "$problems")
  else
    die "Error: second argument must be a number or letters (A–Z, AA, AB, ...)."
  fi
}

letters_to_num() {
  local s="$1"
  local len=${#s}
  local num=0
  for ((i=0; i<len; i++)); do
    c=$(printf "%d" "'${s:i:1}")
    c=$((c - 64)) # 'A' → 1
    num=$((num * 26 + c))
  done
  echo "$num"
}

num_to_letters() {
  local n=$1
  local result=""
  while (( n >= 0 )); do
    local r=$(( n % 26 ))
    result="$(printf \\$(printf '%03o' $((65 + r))))$result"
    n=$(( n / 26 - 1 ))
  done
  echo "$result"
}

create_contest() {
  project_root="$(dirname "$script_dir")"
  contest_path="$project_root/$contest_name"
  template_file="$project_root/template.cpp"

  mkdir -p "$contest_path"

  if [[ ! -f "$template_file" ]]; then
    die "Template file not found: $template_file"
  fi

  for ((i=0; i<count; i++)); do
    letter=$(num_to_letters $i)
    file="$contest_path/$letter.cpp"
    if [[ -f "$file" ]]; then
      msg "${YELLOW}Skipped $file (already exists)${NOFORMAT}"
    else
      sed -e "s/{{PROBLEM}}/$letter/g" \
          -e "s/{{CONTEST}}/$contest_name/g" \
          "$template_file" > "$file"
      msg "${GREEN}Created $file${NOFORMAT}"
    fi
  done
}

parse_params "$@"
setup_colors

create_contest
